---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: beehive-backend
  name: beehive-backend
  namespace: beehive
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: beehive-backend
  template:
    metadata:
      labels:
        app: beehive-backend
    spec:
      imagePullSecrets:
        - name: gitlab-token-beehive-backend
      containers:
        - image: registry.login.no/tekkom/web/beehive/public-api:1.1.2-dev@sha256:fa4e420547509ba7594c8d1c944e99bb26dfa8c62699605b8133768364f2fcfa
          imagePullPolicy: Always
          name: beehive-backend
          env:
            - name: PORT
              value: "8080"
            - name: ALLOWED_ORIGINS
              value: "https://test.login.no,https://www.test.login.no,http://localhost:3000,http://localhost:3000"
            - name: DB_HOST
              value: public-api-psql-ro.beehive.svc.cluster.local
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: beehive
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: beehive-public-api-db-credentials
                  key: password
            - name: DB_NAME
              value: beehive
            # - name: DB_SSL_MODE
            #   value: require
            # - name: GIN_MODE
            #   value: debug
            - name: TLS_ENABLED
              value: "false"
            # - name: TLS_CERT
            #   value: /tls/tls.crt
            # - name: TLS_KEY
            #   value: /tls/tls.key
          ports:
            - containerPort: 8080
              name: 8080tcp
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ping
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true
          # volumeMounts:
          #   - name: tls-certs
          #     readOnly: true
          #     mountPath: "/tls"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - nginx
              topologyKey: kubernetes.io/hostname
      # volumes:
      #   - name: tls-certs
      #     secret:
      #       secretName: backend-self-signed
      #       items:
      #         - key: tls.crt
      #           path: tls.crt
      #         - key: tls.key
      #           path: tls.key
